{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Required Libraries and Set Up Environment Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies\n",
    "import requests\n",
    "import time\n",
    "from dotenv import load_dotenv\n",
    "import os\n",
    "import pandas as pd\n",
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set environment variables from the .env in the local environment\n",
    "load_dotenv()\n",
    "\n",
    "nyt_api_key = os.getenv(\"NYT_API_KEY\")\n",
    "tmdb_api_key = os.getenv(\"TMDB_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Access the New York Times API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the base URL\n",
    "url = \"https://api.nytimes.com/svc/search/v2/articlesearch.json?\"\n",
    "\n",
    "# Filter for movie reviews with \"love\" in the headline\n",
    "# section_name should be \"Movies\"\n",
    "# type_of_material should be \"Review\"\n",
    "filter_query = 'section_name:\"Movies\" AND type_of_material:\"Review\" AND headline:\"love\"'\n",
    "\n",
    "# Use a sort filter, sort by newest\n",
    "sort = \"newest\"\n",
    "\n",
    "# Select the following fields to return:\n",
    "# headline, web_url, snippet, source, keywords, pub_date, byline, word_count\n",
    "field_list = \"headline,web_url,snippet,source,keywords,pub_date,byline,word_count\"\n",
    "\n",
    "# Search for reviews published between a begin and end date\n",
    "begin_date = \"20130101\"\n",
    "end_date = \"20230531\"\n",
    "\n",
    "# Build URL\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retrieved page 0\n",
      "Retrieved page 1\n",
      "Retrieved page 2\n",
      "Retrieved page 3\n",
      "Retrieved page 4\n",
      "Retrieved page 5\n",
      "Retrieved page 6\n",
      "Retrieved page 7\n",
      "Retrieved page 8\n",
      "Retrieved page 9\n",
      "Retrieved page 10\n",
      "Retrieved page 11\n",
      "Retrieved page 12\n",
      "Retrieved page 13\n",
      "Retrieved page 14\n",
      "Retrieved page 15\n",
      "Retrieved page 16\n",
      "Retrieved page 17\n",
      "Retrieved page 18\n",
      "Retrieved page 19\n"
     ]
    }
   ],
   "source": [
    "# Create an empty list to store the reviews\n",
    "reviews_list = []\n",
    "\n",
    "# loop through pages 0-19\n",
    "for page in range(20):\n",
    "    # create query with a page number\n",
    "    # API results show 10 articles at a time\n",
    "\n",
    "    query_params = {\n",
    "        'fq': filter_query,\n",
    "        'begin_date': begin_date,\n",
    "        'end_date': end_date,\n",
    "        'sort': sort,\n",
    "        'fl': field_list,\n",
    "        'api-key': nyt_api_key,\n",
    "        'page': page\n",
    "    }\n",
    "    # Make a \"GET\" request and retrieve the JSON\n",
    "    response = requests.get(url, params=query_params)\n",
    "    data = response.json()\n",
    "    \n",
    "    # Add a twelve second interval between queries to stay within API query limits\n",
    "    time.sleep(12)\n",
    "    \n",
    "    # Try and save the reviews to the reviews_list\n",
    "    try:\n",
    "         # loop through the reviews[\"response\"][\"docs\"] and append each review to the list\n",
    "         for review in data[\"response\"][\"docs\"]:\n",
    "            reviews_list.append(review)\n",
    "         # Print the page that was just retrieved\n",
    "         print(f\"Retrieved page {page}\")\n",
    "    except KeyError:\n",
    "\n",
    "        # Print the page number that had no results then break from the loop\n",
    "        print(f\"No results for page {page}\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"web_url\": \"https://www.nytimes.com/2023/05/25/movies/the-attachment-diaries-review.html\",\n",
      "    \"snippet\": \"A gynecologist and her patient form a horrifyingly twisted connection in this batty, bloody Argentine melodrama.\",\n",
      "    \"source\": \"The New York Times\",\n",
      "    \"headline\": {\n",
      "        \"main\": \"\\u2018The Attachment Diaries\\u2019 Review: Love, Sick\",\n",
      "        \"kicker\": null,\n",
      "        \"content_kicker\": null,\n",
      "        \"print_headline\": \"The Attachment Diaries\",\n",
      "        \"name\": null,\n",
      "        \"seo\": null,\n",
      "        \"sub\": null\n",
      "    },\n",
      "    \"keywords\": [\n",
      "        {\n",
      "            \"name\": \"subject\",\n",
      "            \"value\": \"Movies\",\n",
      "            \"rank\": 1,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"creative_works\",\n",
      "            \"value\": \"The Attachment Diaries (Movie)\",\n",
      "            \"rank\": 2,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Diment, Valentin Javier\",\n",
      "            \"rank\": 3,\n",
      "            \"major\": \"N\"\n",
      "        }\n",
      "    ],\n",
      "    \"pub_date\": \"2023-05-25T11:00:03+0000\",\n",
      "    \"byline\": {\n",
      "        \"original\": \"By Jeannette Catsoulis\",\n",
      "        \"person\": [\n",
      "            {\n",
      "                \"firstname\": \"Jeannette\",\n",
      "                \"middlename\": null,\n",
      "                \"lastname\": \"Catsoulis\",\n",
      "                \"qualifier\": null,\n",
      "                \"title\": null,\n",
      "                \"role\": \"reported\",\n",
      "                \"organization\": \"\",\n",
      "                \"rank\": 1\n",
      "            }\n",
      "        ],\n",
      "        \"organization\": null\n",
      "    },\n",
      "    \"word_count\": 295\n",
      "}\n",
      "{\n",
      "    \"web_url\": \"https://www.nytimes.com/2023/05/04/movies/whats-love-got-to-do-with-it-review.html\",\n",
      "    \"snippet\": \"Two childhood friends navigate cultural differences in this pleasantly uncontentious romantic comedy.\",\n",
      "    \"source\": \"The New York Times\",\n",
      "    \"headline\": {\n",
      "        \"main\": \"Review: \\u2018What\\u2019s Love Got to Do With It?\\u2019 Probably a Lot\",\n",
      "        \"kicker\": null,\n",
      "        \"content_kicker\": null,\n",
      "        \"print_headline\": \"What\\u2019s Love Got to Do With It?\",\n",
      "        \"name\": null,\n",
      "        \"seo\": null,\n",
      "        \"sub\": null\n",
      "    },\n",
      "    \"keywords\": [\n",
      "        {\n",
      "            \"name\": \"subject\",\n",
      "            \"value\": \"Movies\",\n",
      "            \"rank\": 1,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Kapur, Shekhar\",\n",
      "            \"rank\": 2,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"James, Lily\",\n",
      "            \"rank\": 3,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Azmi, Shabana\",\n",
      "            \"rank\": 4,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Thompson, Emma\",\n",
      "            \"rank\": 5,\n",
      "            \"major\": \"N\"\n",
      "        }\n",
      "    ],\n",
      "    \"pub_date\": \"2023-05-04T17:16:45+0000\",\n",
      "    \"byline\": {\n",
      "        \"original\": \"By Jeannette Catsoulis\",\n",
      "        \"person\": [\n",
      "            {\n",
      "                \"firstname\": \"Jeannette\",\n",
      "                \"middlename\": null,\n",
      "                \"lastname\": \"Catsoulis\",\n",
      "                \"qualifier\": null,\n",
      "                \"title\": null,\n",
      "                \"role\": \"reported\",\n",
      "                \"organization\": \"\",\n",
      "                \"rank\": 1\n",
      "            }\n",
      "        ],\n",
      "        \"organization\": null\n",
      "    },\n",
      "    \"word_count\": 287\n",
      "}\n",
      "{\n",
      "    \"web_url\": \"https://www.nytimes.com/2023/05/04/movies/you-can-live-forever-review.html\",\n",
      "    \"snippet\": \"Religion comes between two girls falling in love in the 1990s in this sweet coming-of-age film bathed in grunge hues.\",\n",
      "    \"source\": \"The New York Times\",\n",
      "    \"headline\": {\n",
      "        \"main\": \"\\u2018You Can Live Forever\\u2019 Review: Do You Love Me Now?\",\n",
      "        \"kicker\": null,\n",
      "        \"content_kicker\": null,\n",
      "        \"print_headline\": \"You Can Live Forever\",\n",
      "        \"name\": null,\n",
      "        \"seo\": null,\n",
      "        \"sub\": null\n",
      "    },\n",
      "    \"keywords\": [\n",
      "        {\n",
      "            \"name\": \"subject\",\n",
      "            \"value\": \"Movies\",\n",
      "            \"rank\": 1,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"creative_works\",\n",
      "            \"value\": \"You Can Live Forever (Movie)\",\n",
      "            \"rank\": 2,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Slutsky, Mark\",\n",
      "            \"rank\": 3,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Watts, Sarah (Film Director)\",\n",
      "            \"rank\": 4,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"O'Driscoll, Anwen\",\n",
      "            \"rank\": 5,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Laporte, June (Actor)\",\n",
      "            \"rank\": 6,\n",
      "            \"major\": \"N\"\n",
      "        }\n",
      "    ],\n",
      "    \"pub_date\": \"2023-05-04T11:00:08+0000\",\n",
      "    \"byline\": {\n",
      "        \"original\": \"By Elisabeth Vincentelli\",\n",
      "        \"person\": [\n",
      "            {\n",
      "                \"firstname\": \"Elisabeth\",\n",
      "                \"middlename\": null,\n",
      "                \"lastname\": \"Vincentelli\",\n",
      "                \"qualifier\": null,\n",
      "                \"title\": null,\n",
      "                \"role\": \"reported\",\n",
      "                \"organization\": \"\",\n",
      "                \"rank\": 1\n",
      "            }\n",
      "        ],\n",
      "        \"organization\": null\n",
      "    },\n",
      "    \"word_count\": 294\n",
      "}\n",
      "{\n",
      "    \"web_url\": \"https://www.nytimes.com/2023/04/21/movies/a-tourists-guide-to-love-review.html\",\n",
      "    \"snippet\": \"Rachael Leigh Cook stars in this bland rom-com as a travel executive exploring Vietnam and getting over a breakup.\",\n",
      "    \"source\": \"The New York Times\",\n",
      "    \"headline\": {\n",
      "        \"main\": \"\\u2018A Tourist\\u2019s Guide to Love\\u2019 Review: A Wearyingly Familiar Trip\",\n",
      "        \"kicker\": null,\n",
      "        \"content_kicker\": null,\n",
      "        \"print_headline\": \"A Tourist\\u2019s  Guide to Love\",\n",
      "        \"name\": null,\n",
      "        \"seo\": null,\n",
      "        \"sub\": null\n",
      "    },\n",
      "    \"keywords\": [\n",
      "        {\n",
      "            \"name\": \"subject\",\n",
      "            \"value\": \"Movies\",\n",
      "            \"rank\": 1,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"creative_works\",\n",
      "            \"value\": \"A Tourist's Guide to Love (Movie)\",\n",
      "            \"rank\": 2,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Tsuchida, Steven\",\n",
      "            \"rank\": 3,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Cook, Rachael Leigh\",\n",
      "            \"rank\": 4,\n",
      "            \"major\": \"N\"\n",
      "        }\n",
      "    ],\n",
      "    \"pub_date\": \"2023-04-21T07:03:25+0000\",\n",
      "    \"byline\": {\n",
      "        \"original\": \"By Elisabeth Vincentelli\",\n",
      "        \"person\": [\n",
      "            {\n",
      "                \"firstname\": \"Elisabeth\",\n",
      "                \"middlename\": null,\n",
      "                \"lastname\": \"Vincentelli\",\n",
      "                \"qualifier\": null,\n",
      "                \"title\": null,\n",
      "                \"role\": \"reported\",\n",
      "                \"organization\": \"\",\n",
      "                \"rank\": 1\n",
      "            }\n",
      "        ],\n",
      "        \"organization\": null\n",
      "    },\n",
      "    \"word_count\": 276\n",
      "}\n",
      "{\n",
      "    \"web_url\": \"https://www.nytimes.com/2023/04/20/movies/other-peoples-children-review.html\",\n",
      "    \"snippet\": \"A radiant Virginie Efira stars as a Parisian teacher who blissfully falls for a man and his 4-year-old daughter, complicating everyone\\u2019s lives.\",\n",
      "    \"source\": \"The New York Times\",\n",
      "    \"headline\": {\n",
      "        \"main\": \"\\u2018Other People\\u2019s Children\\u2019 Review: True Romance\",\n",
      "        \"kicker\": \"Critic\\u2019s pick\",\n",
      "        \"content_kicker\": null,\n",
      "        \"print_headline\": \"Intoxicating Love With a Sobering Turn\",\n",
      "        \"name\": null,\n",
      "        \"seo\": null,\n",
      "        \"sub\": null\n",
      "    },\n",
      "    \"keywords\": [\n",
      "        {\n",
      "            \"name\": \"subject\",\n",
      "            \"value\": \"Movies\",\n",
      "            \"rank\": 1,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"persons\",\n",
      "            \"value\": \"Zlotowski, Rebecca\",\n",
      "            \"rank\": 2,\n",
      "            \"major\": \"N\"\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"creative_works\",\n",
      "            \"value\": \"Other People's Children (Movie)\",\n",
      "            \"rank\": 3,\n",
      "            \"major\": \"N\"\n",
      "        }\n",
      "    ],\n",
      "    \"pub_date\": \"2023-04-20T15:35:13+0000\",\n",
      "    \"byline\": {\n",
      "        \"original\": \"By Manohla Dargis\",\n",
      "        \"person\": [\n",
      "            {\n",
      "                \"firstname\": \"Manohla\",\n",
      "                \"middlename\": null,\n",
      "                \"lastname\": \"Dargis\",\n",
      "                \"qualifier\": null,\n",
      "                \"title\": null,\n",
      "                \"role\": \"reported\",\n",
      "                \"organization\": \"\",\n",
      "                \"rank\": 1\n",
      "            }\n",
      "        ],\n",
      "        \"organization\": null\n",
      "    },\n",
      "    \"word_count\": 801\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Preview the first 5 results in JSON format\n",
    "# Use json.dumps with argument indent=4 to format data\n",
    "for review in reviews_list[:5]:\n",
    "    formatted_review = json.dumps(review, indent=4)\n",
    "    print(formatted_review)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                             web_url  \\\n",
      "0  https://www.nytimes.com/2023/05/25/movies/the-...   \n",
      "1  https://www.nytimes.com/2023/05/04/movies/what...   \n",
      "2  https://www.nytimes.com/2023/05/04/movies/you-...   \n",
      "3  https://www.nytimes.com/2023/04/21/movies/a-to...   \n",
      "4  https://www.nytimes.com/2023/04/20/movies/othe...   \n",
      "\n",
      "                                             snippet              source  \\\n",
      "0  A gynecologist and her patient form a horrifyi...  The New York Times   \n",
      "1  Two childhood friends navigate cultural differ...  The New York Times   \n",
      "2  Religion comes between two girls falling in lo...  The New York Times   \n",
      "3  Rachael Leigh Cook stars in this bland rom-com...  The New York Times   \n",
      "4  A radiant Virginie Efira stars as a Parisian t...  The New York Times   \n",
      "\n",
      "                                            keywords  \\\n",
      "0  [{'name': 'subject', 'value': 'Movies', 'rank'...   \n",
      "1  [{'name': 'subject', 'value': 'Movies', 'rank'...   \n",
      "2  [{'name': 'subject', 'value': 'Movies', 'rank'...   \n",
      "3  [{'name': 'subject', 'value': 'Movies', 'rank'...   \n",
      "4  [{'name': 'subject', 'value': 'Movies', 'rank'...   \n",
      "\n",
      "                   pub_date  word_count  \\\n",
      "0  2023-05-25T11:00:03+0000         295   \n",
      "1  2023-05-04T17:16:45+0000         287   \n",
      "2  2023-05-04T11:00:08+0000         294   \n",
      "3  2023-04-21T07:03:25+0000         276   \n",
      "4  2023-04-20T15:35:13+0000         801   \n",
      "\n",
      "                                       headline.main headline.kicker  \\\n",
      "0        ‘The Attachment Diaries’ Review: Love, Sick            None   \n",
      "1  Review: ‘What’s Love Got to Do With It?’ Proba...            None   \n",
      "2  ‘You Can Live Forever’ Review: Do You Love Me ...            None   \n",
      "3  ‘A Tourist’s Guide to Love’ Review: A Wearying...            None   \n",
      "4     ‘Other People’s Children’ Review: True Romance   Critic’s pick   \n",
      "\n",
      "  headline.content_kicker                 headline.print_headline  \\\n",
      "0                    None                  The Attachment Diaries   \n",
      "1                    None          What’s Love Got to Do With It?   \n",
      "2                    None                    You Can Live Forever   \n",
      "3                    None              A Tourist’s  Guide to Love   \n",
      "4                    None  Intoxicating Love With a Sobering Turn   \n",
      "\n",
      "  headline.name headline.seo headline.sub           byline.original  \\\n",
      "0          None         None         None    By Jeannette Catsoulis   \n",
      "1          None         None         None    By Jeannette Catsoulis   \n",
      "2          None         None         None  By Elisabeth Vincentelli   \n",
      "3          None         None         None  By Elisabeth Vincentelli   \n",
      "4          None         None         None         By Manohla Dargis   \n",
      "\n",
      "                                       byline.person byline.organization  \n",
      "0  [{'firstname': 'Jeannette', 'middlename': None...                None  \n",
      "1  [{'firstname': 'Jeannette', 'middlename': None...                None  \n",
      "2  [{'firstname': 'Elisabeth', 'middlename': None...                None  \n",
      "3  [{'firstname': 'Elisabeth', 'middlename': None...                None  \n",
      "4  [{'firstname': 'Manohla', 'middlename': None, ...                None  \n"
     ]
    }
   ],
   "source": [
    "# Convert reviews_list to a Pandas DataFrame using json_normalize()\n",
    "reviews_df = pd.json_normalize(reviews_list)\n",
    "print(reviews_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract the title from the \"headline.main\" column and\n",
    "# save it to a new column \"title\"\n",
    "# Title is between unicode characters \\u2018 and \\u2019. \n",
    "# End string should include \" Review\" to avoid cutting title early\n",
    "def extract_title(headline):\n",
    "    # Extract the title between unicode characters \\u2018 and \\u2019, and include \" Review\"\n",
    "    match = re.search(r'\\u2018(.*?)\\u2019 Review', headline)\n",
    "    if match:\n",
    "        return match.group(1) + \" Review\"\n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract 'name' and 'value' from items in \"keywords\" column\n",
    "def extract_keywords(keyword_list):\n",
    "    extracted_keywords = \"\"\n",
    "    for item in keyword_list:\n",
    "        # Extract 'name' and 'value'\n",
    "        keyword = f\"{item['name']}: {item['value']};\" \n",
    "        # Append the keyword item to the extracted_keywords list\n",
    "        extracted_keywords += keyword\n",
    "    return extracted_keywords\n",
    "\n",
    "# Fix the \"keywords\" column by converting cells from a list to a string\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['The Attachment Diaries', 'What’s Love Got to Do With It?', 'You Can Live Forever', 'A Tourist’s  Guide to Love', 'Intoxicating Love With a Sobering Turn', 'One True Loves', 'The Lost Weekend:  A Love Story', 'An Unbending Will Meets a Shifting City', 'They Have a Humdrum Kind of Love', 'Love in the Time Of Fentanyl', 'Pamela, a Love Story', 'In From the Side', 'After Love', 'Alcarràs', 'Nelly &amp; Nadine', 'A Love Whose Name Is Often Spoken', 'The Sound  Of Christmas', 'A Few Good Men, Some With Secrets', 'It’s Eat, Prey, Love on a Journey of Self-Discovery', 'My Policeman', 'About Fate', 'Waiting for Bojangles', 'A Father Catfishes His Son. We Just Wait for the Ick.', 'The Romantic Ache That Never Truly Dies', 'Alone Together', 'Art of Love', 'The Wheel', 'He’s Still a Norse God, But Also a Big Old Goof', 'A Bliss Doomed To Be Doused', 'A Volcanic Romance Across Continents', 'Love &amp; Gelato', 'Stay Prayed Up', 'A Poet’s Life, In Love and War', 'Dinner in America', 'In a New York Minute', 'Portrait of a Restless Heart', 'I Love America', 'The Persistent Melancholy of Love', 'La Mami', 'Love After Love', 'A Non-Erotic Non-Thriller', 'Lucy and Desi', 'Who Gets to Write the Book of Love?', 'The In Between', 'Book of Love', 'Love, Ferocious and Limitless', 'The Pink Cloud', 'Reflections on Love That’s Built and Lost', 'Meeting a Girl Named Maria, Again', 'Aulcie', 'Love Is Love Is Love', 'Love Hard', 'Scenes From Not Quite a Marriage', 'Hard Luck Love Song', 'South of Heaven', 'Marriage Amid Nationalism', 'Happier Than Ever:  A Love Letter  to Los Angeles', 'Love and Loathing in a Blighted London', 'A Star Is Born. You Won’t Like Him.', 'Her Ex Returns, With His Bride-to-Be', 'Three Days of Violence, Misogyny and $4 Water', 'Casanova, Last Love', 'Running Against the Wind', 'Asia', 'She’s Like a Sprite Out of Water', 'This Town', 'Tu Me Manques', 'Monday', 'This Is Somehow a Love That’s Worth Killing For', 'So Many Siblings  Seeking One Another', 'Luz', 'Happily', 'A Love Letter to 1990s California Hip-Hop', 'A Rom-Com Sequel That May Cause Cavities', 'Young Hearts', 'Little Fish', 'Two of Us', 'Atlantis', 'Neurosurgeon, Heal Thyself', 'Your Name Engraved Herein', 'Young Lovers Swoon, as Young Lovers Should', 'Excuse Me, the Feeling Is Mutual', 'Museum Town', 'Wild Mountain Thyme', 'Acid and Romance: On the Run With Timothy Leary', 'Loved in Hip-Hop, but Loathed in the End', 'Love on the Rocks', 'Love and Monsters', 'A Love Letter Delivered Along With a Death Notice', 'Love, Guaranteed', 'A Young Troupe Needs Some Ballet Tough Love', 'Love Means Never Having, Well, You Know', 'Love of Language Spells Success', 'Making a Haven of Their Own', 'Pratfalling Down The Aisle', 'Schooled in Romance, but Missing Class', 'Hope Gap', 'A Refreshing Exploration of Mental Illness', 'An Unabashedly Old-School Love Story', 'Designing a Love Story', 'Old-Sweater Lives', 'Follow Your Bliss While It Lasts, Kids', 'A Special Spot  In Her Heart', 'Love Simmers Inside a Cauldron', 'Friendly Split, Shattering Break', 'Cyrano, My Love', 'Pretenders', 'Assassin Variations, by Way of Japan', 'Corruption and Charisma Personified', 'A Fine Romance to Watch While Sorting Socks', 'Hot Air', 'Love, Antosha', 'Leto', 'They Whirl, They Twirl, They Tango', 'Falling For a Drifter And His Lookalike', 'A Beautiful Day for Young Hearts', None, 'Beating the Odds for Love and Bliss', 'Clara', 'An Extravagant Spectacle', 'Rafiki', 'A Vibrant Tale of Love, Sisterhood and Decline', 'Five Feet Apart', 'Gangsters’ Paradise Lost, in China', 'Love, and Some Laughter, Is in the Air', 'Exploring the Roots of Life Itself, With Love', 'The Hole  in the Ground', 'Love Takes Wing Amid Trouble in Utopia', 'Love Notes Forge a Caribbean Bond', 'They Show Their Love With a Body Slam', 'Attraction: That’s the Easy Part', 'Berlin, I Love You', 'Untogether', 'A Resonating Love Shall Guide You', 'Love Is Forced to Live in a Nightmare', 'Asher', 'Topical Depression Above Scotland', 'The Great Pretender', 'Love in an Enchanted Forest Turns Eerie', 'The New Romantic', 'Pimp', 'In a Relationship', 'The Legend Behind The Scenes', 'Love Ignites a Divided World', 'After Everything', 'The Man Behind the Music', 'Eccentric Charm, Raucous Abandon', 'Tea With the Dames', 'This Hostage Can Hold a Tune', 'The Citizen', 'Love, Cecil', 'Otherworldly Love in a Punk-Rock World', 'Rogers Park', 'Love &amp; Bananas: An Elephant Story', 'A Portrait and, for Some, a Hate-Watch', 'They Find Each Other, Then Geopolitics Set In', 'Love After Love', 'On Parole and in Love', 'Coming Out Is Complicated', 'Keep the Change', '  Invite Company. Because After All, Misery Loves It.', 'The Housemaid', 'Hitting  Pause On Love', 'Kangaroo: A Love-Hate Story', 'A Love Triangle With Angles That Are Awkward', 'Youth', 'Killing for Love', 'A Monster Worthy of Love', 'Love Beats Rhymes', 'Cuba and the Cameraman', 'Fiction, With Real Life Getting in the Way', 'A Woman in Love Can Burn Down the World', 'Decades of Musical Love and Lust', 'It Happened in L.A.', 'Love Is Wild, if Not Always Pretty', 'The Mountain Between Us', 'Dina', 'In Search of Fellini', 'Woodpeckers', 'I Do ... Until I Don’t', 'Tales of an Immoral Couple', 'After Love', 'The Last Face', 'Killer Lines, Dangerous Dates', 'Insolvent Gentleman Seeks Love', 'Reflecting on a Lifelong Love', 'Love and (Almost) Death', 'Lost in Paris', 'Vincent N Roxxy', 'Everything, Everything', 'Hounds of Love', 'Harold and Lillian: A Hollywood Love Story', 'Love and Life on the Ropes', 'A Love Triangle, Near the Front Lines', 'The Wounds of War and Love', 'Review: A Combustible Pair Find Love in ‘The Other Half’', 'Review: Love as the World Wars, in ‘The Ottoman Lieutenant’', 'It’s Inevitable, Mirth and Taxes', 'Everybody Loves Somebody', 'Kedi']\n"
     ]
    }
   ],
   "source": [
    "# Create a list from the \"title\" column using to_list()\n",
    "# These titles will be used in the query for The Movie Database\n",
    "if 'headline.print_headline' in reviews_df.columns:\n",
    "    titles_list = reviews_df['headline.print_headline'].to_list()\n",
    "    # Display the list of titles\n",
    "    print(titles_list)\n",
    "else:\n",
    "    print(\"Column 'title' does not exist in the DataFrame\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Access The Movie Database API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare The Movie Database query\n",
    "url = \"https://api.themoviedb.org/3/search/movie?query=\"\n",
    "tmdb_key_string = \"&api_key=\" + tmdb_api_key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found movie: The Attachment Diaries\n",
      "Found movie: What’s Love Got to Do With It?\n",
      "Found movie: You Can Live Forever\n",
      "Found movie: A Tourist’s  Guide to Love\n",
      "Found movie: Intoxicating Love With a Sobering Turn\n",
      "Found movie: One True Loves\n",
      "Found movie: The Lost Weekend:  A Love Story\n",
      "Found movie: An Unbending Will Meets a Shifting City\n",
      "Found movie: They Have a Humdrum Kind of Love\n",
      "Found movie: Love in the Time Of Fentanyl\n",
      "Found movie: Pamela, a Love Story\n",
      "Found movie: In From the Side\n",
      "Found movie: After Love\n",
      "Found movie: Alcarràs\n",
      "Found movie: Nelly &amp; Nadine\n",
      "Found movie: A Love Whose Name Is Often Spoken\n",
      "Found movie: The Sound  Of Christmas\n",
      "Found movie: A Few Good Men, Some With Secrets\n",
      "Found movie: It’s Eat, Prey, Love on a Journey of Self-Discovery\n",
      "Found movie: My Policeman\n",
      "Found movie: About Fate\n",
      "Found movie: Waiting for Bojangles\n",
      "Found movie: A Father Catfishes His Son. We Just Wait for the Ick.\n",
      "Found movie: The Romantic Ache That Never Truly Dies\n",
      "Found movie: Alone Together\n",
      "Found movie: Art of Love\n",
      "Found movie: The Wheel\n",
      "Found movie: He’s Still a Norse God, But Also a Big Old Goof\n",
      "Found movie: A Bliss Doomed To Be Doused\n",
      "Found movie: A Volcanic Romance Across Continents\n",
      "Found movie: Love &amp; Gelato\n",
      "Found movie: Stay Prayed Up\n",
      "Found movie: A Poet’s Life, In Love and War\n",
      "Found movie: Dinner in America\n",
      "Found movie: In a New York Minute\n",
      "Found movie: Portrait of a Restless Heart\n",
      "Found movie: I Love America\n",
      "Found movie: The Persistent Melancholy of Love\n",
      "Found movie: La Mami\n",
      "Found movie: Love After Love\n",
      "Found movie: A Non-Erotic Non-Thriller\n",
      "Found movie: Lucy and Desi\n",
      "Found movie: Who Gets to Write the Book of Love?\n",
      "Found movie: The In Between\n",
      "Found movie: Book of Love\n",
      "Found movie: Love, Ferocious and Limitless\n",
      "Found movie: The Pink Cloud\n",
      "Found movie: Reflections on Love That’s Built and Lost\n",
      "Found movie: Meeting a Girl Named Maria, Again\n",
      "Found movie: Aulcie\n",
      "Found movie: Love Is Love Is Love\n",
      "Found movie: Love Hard\n",
      "Found movie: Scenes From Not Quite a Marriage\n",
      "Found movie: Hard Luck Love Song\n",
      "Found movie: South of Heaven\n",
      "Found movie: Marriage Amid Nationalism\n",
      "Found movie: Happier Than Ever:  A Love Letter  to Los Angeles\n",
      "Found movie: Love and Loathing in a Blighted London\n",
      "Found movie: A Star Is Born. You Won’t Like Him.\n",
      "Found movie: Her Ex Returns, With His Bride-to-Be\n",
      "Found movie: Three Days of Violence, Misogyny and $4 Water\n",
      "Found movie: Casanova, Last Love\n",
      "Found movie: Running Against the Wind\n",
      "Found movie: Asia\n",
      "Found movie: She’s Like a Sprite Out of Water\n",
      "Found movie: This Town\n",
      "Found movie: Tu Me Manques\n",
      "Found movie: Monday\n",
      "Found movie: This Is Somehow a Love That’s Worth Killing For\n",
      "Found movie: So Many Siblings  Seeking One Another\n",
      "Found movie: Luz\n",
      "Found movie: Happily\n",
      "Found movie: A Love Letter to 1990s California Hip-Hop\n",
      "Found movie: A Rom-Com Sequel That May Cause Cavities\n",
      "Found movie: Young Hearts\n",
      "Found movie: Little Fish\n",
      "Found movie: Two of Us\n",
      "Found movie: Atlantis\n",
      "Found movie: Neurosurgeon, Heal Thyself\n",
      "Found movie: Your Name Engraved Herein\n",
      "Found movie: Young Lovers Swoon, as Young Lovers Should\n",
      "Found movie: Excuse Me, the Feeling Is Mutual\n",
      "Found movie: Museum Town\n",
      "Found movie: Wild Mountain Thyme\n",
      "Found movie: Acid and Romance: On the Run With Timothy Leary\n",
      "Found movie: Loved in Hip-Hop, but Loathed in the End\n",
      "Found movie: Love on the Rocks\n",
      "Found movie: Love and Monsters\n",
      "Found movie: A Love Letter Delivered Along With a Death Notice\n",
      "Found movie: Love, Guaranteed\n",
      "Found movie: A Young Troupe Needs Some Ballet Tough Love\n",
      "Found movie: Love Means Never Having, Well, You Know\n",
      "Found movie: Love of Language Spells Success\n",
      "Found movie: Making a Haven of Their Own\n",
      "Found movie: Pratfalling Down The Aisle\n",
      "Found movie: Schooled in Romance, but Missing Class\n",
      "Found movie: Hope Gap\n",
      "Found movie: A Refreshing Exploration of Mental Illness\n",
      "Found movie: An Unabashedly Old-School Love Story\n",
      "Found movie: Designing a Love Story\n",
      "Found movie: Old-Sweater Lives\n",
      "Found movie: Follow Your Bliss While It Lasts, Kids\n",
      "Found movie: A Special Spot  In Her Heart\n",
      "Found movie: Love Simmers Inside a Cauldron\n",
      "Found movie: Friendly Split, Shattering Break\n",
      "Found movie: Cyrano, My Love\n",
      "Found movie: Pretenders\n",
      "Found movie: Assassin Variations, by Way of Japan\n",
      "Found movie: Corruption and Charisma Personified\n",
      "Found movie: A Fine Romance to Watch While Sorting Socks\n",
      "Found movie: Hot Air\n",
      "Found movie: Love, Antosha\n",
      "Found movie: Leto\n",
      "Found movie: They Whirl, They Twirl, They Tango\n",
      "Found movie: Falling For a Drifter And His Lookalike\n",
      "Found movie: A Beautiful Day for Young Hearts\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "can only concatenate str (not \"NoneType\") to str",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[44], line 19\u001b[0m\n\u001b[1;32m     16\u001b[0m request_counter \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;66;03m# Perform a \"GET\" request for The Movie Database\u001b[39;00m\n\u001b[0;32m---> 19\u001b[0m response \u001b[38;5;241m=\u001b[39m requests\u001b[38;5;241m.\u001b[39mget(url \u001b[38;5;241m+\u001b[39m title \u001b[38;5;241m+\u001b[39m tmdb_key_string)\n\u001b[1;32m     21\u001b[0m \u001b[38;5;66;03m# Include a try clause to search for the full movie details.\u001b[39;00m\n\u001b[1;32m     22\u001b[0m \u001b[38;5;66;03m# Use the except clause to print out a statement if a movie\u001b[39;00m\n\u001b[1;32m     23\u001b[0m \u001b[38;5;66;03m# is not found.\u001b[39;00m\n\u001b[1;32m     24\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n",
      "\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"NoneType\") to str"
     ]
    }
   ],
   "source": [
    "# Create an empty list to store the results\n",
    "tmdb_movies_list = []\n",
    "\n",
    "# Create a request counter to sleep the requests after a multiple\n",
    "# of 50 requests\n",
    "request_counter = 0\n",
    "\n",
    "# Loop through the titles\n",
    "for title in titles_list:\n",
    "    # Check if we need to sleep before making a request\n",
    "    if request_counter % 50 == 0 and request_counter != 0:\n",
    "        time.sleep(10)\n",
    "\n",
    "\n",
    "    # Add 1 to the request counter\n",
    "    request_counter += 1\n",
    "    \n",
    "    # Perform a \"GET\" request for The Movie Database\n",
    "    response = requests.get(url + title + tmdb_key_string)\n",
    "\n",
    "    # Include a try clause to search for the full movie details.\n",
    "    # Use the except clause to print out a statement if a movie\n",
    "    # is not found.\n",
    "    try:\n",
    "        movie_data = response.json()\n",
    "\n",
    "        # Get movie id\n",
    "        if movie_data['results']:\n",
    "            movie_id = movie_data['results'][0]['id']\n",
    "\n",
    "        # Make a request for a the full movie details\n",
    "        movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}?api_key={tmdb_api_key}\"\n",
    "        movie_details_response = requests.get(movie_details_url)\n",
    "        movie_details = movie_details_response.json()\n",
    "\n",
    "\n",
    "        # Execute \"GET\" request with url\n",
    "        movie_details_response = requests.get(movie_details_url)\n",
    "        movie_details = movie_details_response.json()\n",
    "        \n",
    "        # Extract the genre names into a list\n",
    "        \n",
    "        genres = [genre['name'] for genre in movie_details.get('genres', [])]\n",
    "        \n",
    "\n",
    "\n",
    "        # Extract the spoken_languages' English name into a list\n",
    "        spoken_languages = [lang['english_name'] for lang in movie_details.get('spoken_languages', [])]\n",
    "        \n",
    "        # Extract the production_countries' name into a list\n",
    "        production_countries = [country['name'] for country in movie_details.get('production_countries', [])]\n",
    "\n",
    "\n",
    "\n",
    "        # Add the relevant data to a dictionary and\n",
    "        # append it to the tmdb_movies_list list\n",
    "        movie_info = {\n",
    "                'title': title,\n",
    "                'genres': genres,\n",
    "                'spoken_languages': spoken_languages,\n",
    "                'production_countries': production_countries\n",
    "            }\n",
    "        tmdb_movies_list.append(movie_info)\n",
    "        \n",
    "        # Print out the title that was found\n",
    "        print(f\"Found movie: {title}\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Movie not found: {title}. Error: {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preview the first 5 results in JSON format\n",
    "# Use JSON.dumps with argument indent=4 to format data\n",
    "for movie in tmdb_movies_list[:5]:\n",
    "    formatted_movie = json.dumps(movie, indent=4)\n",
    "    print(formatted_movie)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the results to a DataFrame\n",
    "tmdb_df = pd.DataFrame(tmdb_movies_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge and Clean the Data for Export"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Merge the New York Times reviews and TMDB DataFrames on title\n",
    "merged_df = pd.merge(reviews_df, tmdb_df, on='title', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove list brackets and quotation marks on the columns containing lists\n",
    "# Create a list of the columns that need fixing\n",
    "columns_to_fix = ['genres', 'spoken_languages', 'production_countries']\n",
    "\n",
    "\n",
    "# Create a list of characters to remove\n",
    "chars_to_remove = [\"[\", \"]\", \"'\"]\n",
    "\n",
    "# Loop through the list of columns to fix\n",
    "for column in columns_to_fix:\n",
    "    # Convert the column to type 'str'\n",
    "    merged_df[column] = merged_df[column].astype(str)\n",
    "\n",
    "\n",
    "    # Loop through characters to remove\n",
    "    for char in chars_to_remove:\n",
    "        merged_df[column] = merged_df[column].str.replace(char, '')\n",
    "\n",
    "\n",
    "# Display the fixed DataFrame\n",
    "    print(merged_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop \"byline.person\" column\n",
    "merged_df = merged_df.drop(columns=['byline.person'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Delete duplicate rows and reset index\n",
    "merged_df = merged_df.drop_duplicates().reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Export data to CSV without the index\n",
    "merged_df = merged_df.drop_duplicates().reset_index(drop=True)\n",
    "print(merged_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
